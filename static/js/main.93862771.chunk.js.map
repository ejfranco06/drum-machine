{"version":3,"sources":["component/DrumPadButton/DrumPadButton.jsx","data/sound-banks.js","App.jsx","serviceWorker.js","index.jsx"],"names":["DrumPadButton","keyTrigger","url","id","setDisplayText","isPowered","keyCode","audioEl","useRef","audioBtn","lastPlayed","playSound","current","Date","currentTime","play","useEffect","setMilliseconds","getMilliseconds","simulateClick","event","timePassed","setTime","getTime","canRepeat","click","classList","toggle","setTimeout","document","addEventListener","removeEventListener","ref","className","onClick","e","src","preload","bankOne","bankTwo","App","useState","displayText","bank","setBank","bankSwitch","setBankSwitch","type","data-bank","map","el","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93862771.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport './DrumPadButton.css';\n\n// Time in milliseconds\nconst DELAY_TIME_MS = 120;\n\nexport default function DrumPadButton({\n  keyTrigger,\n  url,\n  id,\n  setDisplayText,\n  isPowered,\n  keyCode,\n}) {\n  const audioEl = useRef(null);\n  const audioBtn = useRef(null);\n  const lastPlayed = useRef(null);\n\n  const handleClick = (e) => {\n    //do nothing if drum machine is not powered\n    if (!isPowered) {\n      return;\n    }\n    setDisplayText(id);\n    playSound();\n  };\n\n  const playSound = () => {\n    lastPlayed.current = new Date();\n    audioEl.current.currentTime = 0;\n    audioEl.current.play();\n  };\n\n  useEffect(() => {\n    const currentTime = new Date();\n    currentTime.setMilliseconds(currentTime.getMilliseconds() - DELAY_TIME_MS);\n    lastPlayed.current = currentTime;\n  }, []);\n\n  useEffect(() => {\n\n    const canRepeat = () => {\n      const timePassed = new Date();\n      timePassed.setTime(timePassed.getTime() - lastPlayed.current.getTime());\n      return timePassed.getMilliseconds() >= DELAY_TIME_MS;\n    };\n\n    const simulateClick = (event) => {\n      if (event.keyCode === keyCode && canRepeat()) {\n        audioBtn.current.click();\n        audioBtn.current.classList.toggle('drum-pad-pressed');\n\n        setTimeout(() => {\n          audioBtn.current.classList.toggle('drum-pad-pressed');\n        }, 200);\n      }\n    };\n\n    document.addEventListener('keydown', simulateClick);\n\n    return function cleanUp() {\n      document.removeEventListener('keydown', simulateClick);\n    };\n  }, [keyCode]);\n\n  return (\n    <button ref={audioBtn} className=\"drum-pad\" id={id} onClick={handleClick}>\n      <h3>{keyTrigger}</h3>\n      <audio\n        ref={audioEl}\n        src={url}\n        preload=\"auto\"\n      />\n    </button>\n  );\n}\n","// These sound banks are from freecodecamp\n\nexport const bankOne = [\n  {\n    keyCode: 81,\n    keyTrigger: \"Q\",\n    id: \"Heater-1\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    keyCode: 87,\n    keyTrigger: \"W\",\n    id: \"Heater-2\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    keyCode: 69,\n    keyTrigger: \"E\",\n    id: \"Heater-3\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    keyCode: 65,\n    keyTrigger: \"A\",\n    id: \"Heater-4\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    keyCode: 83,\n    keyTrigger: \"S\",\n    id: \"Clap\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n  {\n    keyCode: 68,\n    keyTrigger: \"D\",\n    id: \"Open-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    keyCode: 90,\n    keyTrigger: \"Z\",\n    id: \"Kick-n'-Hat\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    keyCode: 88,\n    keyTrigger: \"X\",\n    id: \"Kick\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    keyCode: 67,\n    keyTrigger: \"C\",\n    id: \"Closed-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n];\n\nexport const bankTwo = [\n  {\n    keyCode: 81,\n    keyTrigger: \"Q\",\n    id: \"Chord-1\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\"\n  },\n  {\n    keyCode: 87,\n    keyTrigger: \"W\",\n    id: \"Chord-2\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\"\n  },\n  {\n    keyCode: 69,\n    keyTrigger: \"E\",\n    id: \"Chord-3\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\"\n  },\n  {\n    keyCode: 65,\n    keyTrigger: \"A\",\n    id: \"Shaker\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\"\n  },\n  {\n    keyCode: 83,\n    keyTrigger: \"S\",\n    id: \"Open-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\"\n  },\n  {\n    keyCode: 68,\n    keyTrigger: \"D\",\n    id: \"Closed-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\"\n  },\n  {\n    keyCode: 90,\n    keyTrigger: \"Z\",\n    id: \"Punchy-Kick\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"\n  },\n  {\n    keyCode: 88,\n    keyTrigger: \"X\",\n    id: \"Side-Stick\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\"\n  },\n  {\n    keyCode: 67,\n    keyTrigger: \"C\",\n    id: \"Snare\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"\n  }\n];\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport DrumPadButton from './component/DrumPadButton/DrumPadButton';\nimport { bankOne, bankTwo } from './data/sound-banks';\n\nexport default function App() {\n  const [isPowered, setIsPowered] = useState(true);\n  const [displayText, setDisplayText] = useState('Drum Machine');\n  const [bank, setBank] = useState(bankOne);\n  const [volume, setVolume] = useState(1);\n  const [bankSwitch, setBankSwitch] = useState(false);\n\n  const toggleBanks = ()=>{\n    setBankSwitch(!bankSwitch);\n    setDisplayText(bankSwitch? \"Bank One\": \"Bank Two\")\n    const nextBank =  bankSwitch? bankOne: bankTwo;\n    setBank(nextBank);\n\n  }\n  return (<>\n    <h1 className=\"header-title\">Drum Machine</h1>\n    <div id=\"drum-machine\">\n      <div className=\"controls\">\n        <p id=\"display\">{displayText}</p>\n\n        <div>\n          <p>Bank</p>\n          <label className=\"switch\">\n          <input type=\"checkbox\"  onClick={toggleBanks}/> \n          <span className=\"slider round\" data-bank={bankSwitch? 2: 1}></span>\n        </label>\n        </div>\n        \n      </div>\n      <ul className=\"drum-pads-container\">\n        {bank.map((el) => (\n          <DrumPadButton\n            keyTrigger={el.keyTrigger}\n            key={el.id}\n            url={el.url}\n            id={el.id}\n            setDisplayText={setDisplayText}\n            isPowered={isPowered}\n            keyCode={el.keyCode}\n          />\n        ))}\n      </ul>\n    </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}